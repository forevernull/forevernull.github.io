<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Forevernull&#39;s Lab</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://forevernull.github.io/"/>
  <updated>2016-10-12T16:35:37.000Z</updated>
  <id>https://forevernull.github.io/</id>
  
  <author>
    <name>Forevernull</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构 - 树</title>
    <link href="https://forevernull.github.io/2016/10/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%91/"/>
    <id>https://forevernull.github.io/2016/10/12/数据结构树/</id>
    <published>2016-10-12T15:00:00.000Z</published>
    <updated>2016-10-12T16:35:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>树是一种非线性结构,以根节点和子数给出递归定义，同时主要考察数的是那种存储方式，双亲表示法、孩子表示法和孩子兄弟表示法，以及树的遍历。<br><a id="more"></a></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>树是N个节点的有限集合，N=0是<strong>空树</strong>, 非空树满足:</p>
<ul>
<li>有且仅有一个特定的根结点</li>
<li>当N&gt;1时，其余节点可分为m(m&gt;0)个互不相交的有限集合T<sub>1</sub>, T<sub>2</sub>, … T<sub>m</sub>,其中每个集合本身又构成一棵树</li>
</ul>
<p>上述即为所谓的递归定义。树中的结点除根节点外有且仅有一个前驱结点，可以有多个后继结点。<br>树适用于表示层次结构的数据。<br><img src="http://7xospc.com1.z0.glb.clouddn.com/6-2-1.jpg" height="200"></p>
<h4 id="术语定义"><a href="#术语定义" class="headerlink" title="术语定义"></a>术语定义</h4><ul>
<li>各种结点: 祖先结点，子孙结点，双亲结点，孩子结点，这个就是位置关系，不赘述。</li>
<li>叶子结点、分支结点: 是说有没有孩子的问题，有就是分支节点，否则为叶子节点。</li>
<li>度: 树中一个结点的子结点个数。</li>
<li>节点深度: 从树根到结点的层数。</li>
<li>节点的高度: 从叶节点到结点的层数。</li>
<li>树的高度(深度): 树中节点的最大层数。  </li>
</ul>
<h4 id="树的性质"><a href="#树的性质" class="headerlink" title="树的性质"></a>树的性质</h4><ul>
<li>树的结点数等于所有节点度数加1.</li>
<li>度为m的树中第i层上至多有m<sup>i-1</sup>个节点(i&gt;=1)</li>
<li>高度为h的m叉树至多有(m<sup>h</sup>-1)/(m-1)个几点（把每层加起来就知道了）</li>
<li>具有n个节点的m叉树的最小高度为log<sub>m</sub>(n(m-1)+1)向上取整</li>
</ul>
<h2 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h2><p>虽然树是非线性的，但是依然使用线性结构存储，可以采用顺序存储也可以采用链式存储，但是必须能够唯一地反映出各结点之间的逻辑关系，常用的有三种存储方式。</p>
<h4 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h4><p>双亲表示法采用一组连续的空间来存储每个结点，同时在每个结点增设一个伪指针，指示其双亲结点在数组中的位置。根节点下标为0，其伪指针为-1。<br><img src="http://uploadfiles.nowcoder.com/images/20151024/141075_1445693833613_1AAF5362E19DED27A8EF34AC86C6C201" height="200"></p>
<p>特点: 可以很快找到结点的双亲，要找结点的孩子结点需要遍历</p>
<h4 id="孩子（链表）表示法"><a href="#孩子（链表）表示法" class="headerlink" title="孩子（链表）表示法"></a>孩子（链表）表示法</h4><p>孩子表示法是讲每个结点的孩子结点都用单链表链接起来形成一个线性结构，则N个节点就有N个孩子链表（叶子节点的孩子链表为空表）<br><img src="http://img.blog.csdn.net/20160203195139991?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" height="200"></p>
<p>特点: 可以很快找到结点的孩子，但找双亲需要遍历</p>
<h4 id="孩子兄弟表示法"><a href="#孩子兄弟表示法" class="headerlink" title="孩子兄弟表示法"></a>孩子兄弟表示法</h4><p>孩子兄弟表示法又叫二叉树表示法，即以二叉链表作为树的存储结构。孩子兄弟表示法是使每个结点包含是：结点值、指向结点第一个孩子结点的指针和指向结点下一个兄弟结点的指针。</p>
<p><img src="http://images.cnitblog.com/blog/702546/201412/171546512811963.png" height="200"></p>
<p>特点: 可以方便地转化为二叉树，易于查找结点的孩子，但是查找双亲比较麻烦</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h4 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h4><ul>
<li>先根遍历：若树非空，则先访问根结点，再按照从左到右的顺序遍历根结点的每一棵子树，其访问顺序与这棵树相应的二叉树的先序遍历顺序相同。<br><img src="http://img0.imgtn.bdimg.com/it/u=4077072849,2681057515&fm=21&gp=0.jpg" height="200"></li>
<li>后跟遍历: 若树非空，则按从左到右的顺序遍历根节点的每一棵子树，之后再访问跟几点，其访问顺序与这棵树相应二叉树的中序遍历顺序相同。<br><img src="http://7xospc.com1.z0.glb.clouddn.com/6-8-4.jpg" height="200"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树是一种非线性结构,以根节点和子数给出递归定义，同时主要考察数的是那种存储方式，双亲表示法、孩子表示法和孩子兄弟表示法，以及树的遍历。&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://forevernull.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 - 数组与矩阵</title>
    <link href="https://forevernull.github.io/2016/10/10/2016-10-10-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B0%E7%BB%84%E5%92%8C%E7%9F%A9%E9%98%B5/"/>
    <id>https://forevernull.github.io/2016/10/10/2016-10-10-数据结构数组和矩阵/</id>
    <published>2016-10-10T15:11:00.000Z</published>
    <updated>2016-10-10T16:25:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>数组与矩阵是特殊形式的线性表。数组包括一维数组和多维数组，多维数组就是多个一维数组的拼接;<br>矩阵是数组的特例，主要考虑矩阵的压缩，用于节约存储空间，主要考虑有规律的矩阵，其中包括对称阵、三角阵以及稀疏矩阵这几种特殊矩阵。<br><a id="more"></a></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>数组是由n（n&gt;=1）个相同类型的数据元素构成的有限序列。</p>
<h4 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h4><p>一个数组的所有元素在内存中占用一段连续的存储空间。对于多维数组有两种映射方式：行优先和列优先。<br><img src="http://img.my.csdn.net/uploads/201009/20/0_1284982005Uo02.gif" height="250"></p>
<h4 id="操作-关注点"><a href="#操作-关注点" class="headerlink" title="操作(关注点)"></a>操作(关注点)</h4><ul>
<li>存储结构关系:<ul>
<li>一维数组: LOC(a<sub>i</sub>) = LOC(a<sub>0</sub>) + i x L (0&lt;=i&lt;n, L为每个元素所占存储空间)</li>
</ul>
</li>
</ul>
<h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>特殊矩阵: 是指具有许多相同元素或零元素，并且这些相同矩阵元素或零元素的分布有一定规律性的矩阵。常见的特殊矩阵有对称矩阵、三角矩阵、对称矩阵。</p>
<h4 id="存储方式-1"><a href="#存储方式-1" class="headerlink" title="存储方式"></a>存储方式</h4><ul>
<li>对称矩阵: 只存储主对角线和下三角区的元素，一维数组B[n(n+1)/2]<br><img src="http://c.biancheng.net/cpp/uploads/allimg/120222/1-1202221H350506.jpg" height="250"></li>
<li>三角矩阵: 存储主对角线和下三角区的元素, 及上三角中的常量一次,一维数组B[n(n+1)/2 + 1]<br><img src="http://www.educity.cn/zk/sjjg/images/20068288629.gif" height="150"></li>
<li>三对角矩阵: 第一行和最后一行为两个元素，其他行为三个元素, 按行优先存储到一维数组中。<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/df3151d2eb6faa10d9c59070532f183ab1e64d8c" height="100"></li>
<li>稀疏矩阵: 非零元素存储为三元组(行，列，值)<br><img src="http://www.educity.cn/zk/sjjg/images/20068281174.gif" height="200"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组与矩阵是特殊形式的线性表。数组包括一维数组和多维数组，多维数组就是多个一维数组的拼接;&lt;br&gt;矩阵是数组的特例，主要考虑矩阵的压缩，用于节约存储空间，主要考虑有规律的矩阵，其中包括对称阵、三角阵以及稀疏矩阵这几种特殊矩阵。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据结构 - 堆栈和队列</title>
    <link href="https://forevernull.github.io/2016/10/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A0%86%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>https://forevernull.github.io/2016/10/09/数据结构堆栈和队列/</id>
    <published>2016-10-09T03:32:00.000Z</published>
    <updated>2016-10-09T08:07:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>堆栈和队列是操作受限的线性表，栈为后进先出(LIFO)的线性表,队列为先进先出(FIFO)的线性表。<br><a id="more"></a></p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈只允许在栈顶进行进栈(push)和出栈(pop)操作。对于链栈，next域指向靠近栈底的元素。</p>
<image src="http://images2015.cnblogs.com/blog/707050/201510/707050-20151016111838476-1991678473.png" height="200">

<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h4 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h4><p>队列的存储可以使用线性表的数组或者带尾指针链表存储方式，逻辑结构包括顺序队列，为了避免“假溢出”引入循环队列。</p>
<ul>
<li>顺序队列(普通队列、双端队列)</li>
<li>循环队列</li>
</ul>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>假设队列为0…n, M = n+1 </p>
<ul>
<li>队列长度:<ul>
<li>顺序队列: rear - front</li>
<li>循环队列: (rear - front + M) mod M</li>
</ul>
</li>
<li>判空<ul>
<li>队列: front = rear</li>
</ul>
</li>
<li>判满<ul>
<li>顺序队列: rear - front = M</li>
<li>循环队列: (rear - front + 1 + M ) mod M = M //牺牲一个存储单元，请查看示例</li>
</ul>
</li>
<li>插入<ul>
<li>顺序队列: rear = rear + 1; front 不动;</li>
<li>循环队列: rear = (rear + 1) mod M; front 不动;</li>
</ul>
</li>
<li>删除<ul>
<li>顺序队列: front = front + 1; rear = rear</li>
<li>循环队列: front = (front + 1) mod M; rear = rear</li>
</ul>
</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><img src="http://www.nowamagic.net/librarys/images/201211/2012_11_22_01.jpg" alt="顺序队列"><br><img src="http://c.biancheng.net/cpp/uploads/allimg/140713/1-140G32234251B.jpg" alt="循环队列"></p>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p><a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="external">leetcode: valid parentheses</a> 利用栈进行符号匹配</p>
</image>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;堆栈和队列是操作受限的线性表，栈为后进先出(LIFO)的线性表,队列为先进先出(FIFO)的线性表。&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://forevernull.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 - 线性表</title>
    <link href="https://forevernull.github.io/2016/10/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <id>https://forevernull.github.io/2016/10/08/数据结构单链表/</id>
    <published>2016-10-08T10:37:00.000Z</published>
    <updated>2016-10-08T11:31:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>什么是线性表?怎么存数据?线性表的插入与删除操作?本文只涉及这三个问题。<br><a id="more"></a></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>线性表（Linear List）是由n（n≥0）个数据元素组成的有限序列。</p>
<h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><ul>
<li>顺序表</li>
<li>链表(单链表, 双链表, 循环链表)<ul>
<li>单链表<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Singly-linked-list.svg/408px-Singly-linked-list.svg.png" alt="单链表"></li>
<li>双向链表<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Doubly-linked-list.svg/610px-Doubly-linked-list.svg.png" alt="双向链表"></li>
<li>循环链表<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Circularly-linked-list.svg/350px-Circularly-linked-list.svg.png" alt="循环链表"></li>
</ul>
</li>
</ul>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><p>删除操作是O(n)的操作，首先从头开始找到第i个元素p，然后执行删除操作:</p>
<ul>
<li>顺序表，直接”挤删”，移动n-i个元素即可</li>
<li>单链表, q-&gt;next = q-&gt;next-&gt;next; //q为p的前驱结点，此处忽略释放<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/CPT-LinkedLists-deletingnode.svg/380px-CPT-LinkedLists-deletingnode.svg.png" alt="单链表删除"></li>
<li>双链表, p-&gt;prior-&gt;next=p-&gt;next;   p-&gt;next-&gt;prior=p-&gt;prior;  //未考虑头尾结点</li>
<li>循环链表参考单链表或双链表</li>
</ul>
<h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>插入操作是O(n)的操作，需要找到第i个元素p后插入s:</p>
<ul>
<li>顺序表, 后移n-i个元素,p[i] = s;</li>
<li>单链表, s = p-&gt;next; p-&gt;next = s;<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/4b/CPT-LinkedLists-addingnode.svg/474px-CPT-LinkedLists-addingnode.svg.png" alt="单链表插入"></li>
<li>双链表, s-&gt;prior = p; s-&gt;next = p-&gt;next; p-&gt;next-&gt;prior=s; p-&gt;next = s;</li>
<li>循环链表参考单链表或双链表</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://en.wikipedia.org/wiki/Linked_list" target="_blank" rel="external">https://en.wikipedia.org/wiki/Linked_list</a><br><a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8" target="_blank" rel="external">https://zh.wikipedia.org/wiki/线性表</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是线性表?怎么存数据?线性表的插入与删除操作?本文只涉及这三个问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://forevernull.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>pyhive安装与使用</title>
    <link href="https://forevernull.github.io/2016/08/11/hive%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://forevernull.github.io/2016/08/11/hive安装与使用/</id>
    <published>2016-08-11T08:31:21.000Z</published>
    <updated>2016-08-12T03:29:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hive太稳定了，基本上每个架构都离不开这个工具，下面我们通过python连接hive，然后完成各种查询等的操作。Python Hive有一个很好的工具<a href="https://github.com/dropbox/PyHive" target="_blank" rel="external">pyHive</a></p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>Python 2.7</li>
<li>我使用的是Centos系统,所以还需要安装:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install -y install cyrus-sasl cyrus-sasl-devel cyrus-sasl-plain cyrus-sasl-gssapi</div></pre></td></tr></table></figure>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pyhive[hive]</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyhive <span class="keyword">import</span> hive</div><div class="line"><span class="keyword">from</span> TCLIService.ttypes <span class="keyword">import</span> TOperationState</div><div class="line">cursor = hive.connect(<span class="string">'localhost'</span>).cursor()</div><div class="line">cursor.execute(<span class="string">'SELECT * FROM my_awesome_data LIMIT 10'</span>, <span class="keyword">async</span>=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">status = cursor.poll().operationState</div><div class="line"><span class="keyword">while</span> status <span class="keyword">in</span> (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):</div><div class="line">    logs = cursor.fetch_logs()</div><div class="line">    <span class="keyword">for</span> message <span class="keyword">in</span> logs:</div><div class="line">        <span class="keyword">print</span> message</div><div class="line"></div><div class="line">    <span class="comment"># If needed, an asynchronous query can be cancelled at any time with:</span></div><div class="line">    <span class="comment"># cursor.cancel()</span></div><div class="line"></div><div class="line">    status = cursor.poll().operationState</div><div class="line"></div><div class="line"><span class="keyword">print</span> cursor.fetchall()</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实这是一篇测试文章，具体请<a href="https://github.com/dropbox/PyHive" target="_blank" rel="external">参考</a>, 大部分代码纯属抄袭！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hive太稳定了，基本上每个架构都离不开这个工具，下面我们通过python连接hive，然后完成各种查询等的操作。Python Hive有一个很好的工具&lt;a href=&quot;https://github.com/dropbox/PyHive&quot;&gt;pyHive&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://forevernull.github.io/2016/07/25/hello-world/"/>
    <id>https://forevernull.github.io/2016/07/25/hello-world/</id>
    <published>2016-07-25T15:55:15.000Z</published>
    <updated>2016-08-12T03:18:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
